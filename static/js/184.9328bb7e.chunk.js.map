{"version":3,"file":"static/js/184.9328bb7e.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MovieItem/MovieItem.styled.jsx","components/MoviesList/MovieItem/MovieItem.jsx","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx","services/api.js","services/authentication.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListContainer = styled.ul`\n  margin: 0;\n  padding: 20px;\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n  grid-gap: 16px;\n`;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const DetailContainer = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\nexport const ItemLink = styled(Link)``;\n\nexport const Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: 10px;\n  &:hover {\n    transform: scale(1.03);\n    cursor: pointer;\n    border: white solid 2px;\n  }\n`;\n","import { ItemLink, Image } from './MovieItem.styled';\nimport { useLocation } from 'react-router-dom';\n\nconst IMG_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\n\nfunction MovieItem({ item }) {\n  const location = useLocation();\n  const addPath = location.pathname === '/movies' ? '' : 'movies/';\n\n  return (\n    <ItemLink to={`${addPath}${item.id}`} state={{ from: location }}>\n      <Image src={IMG_BASE_URL + item.poster_path} alt={item.title} />\n    </ItemLink>\n  );\n}\n\nexport default MovieItem;\n","import { ListContainer } from './MoviesList.styled';\nimport MovieItem from './MovieItem';\n\nfunction MoviesList({ movies }) {\n  return (\n    <ListContainer>\n      {movies.map(movie => {\n        return <MovieItem key={movie.id} item={movie} />;\n      })}\n    </ListContainer>\n  );\n}\n\nexport default MoviesList;\n","import * as API from '../../services/api';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport MoviesList from 'components/MoviesList';\n\nfunction Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('q') ? searchParams.get('q') : '';\n\n  const [movies, setMovies] = useState();\n  useEffect(() => {\n    async function getMovieCast() {\n      try {\n        const response = await API.getSearchMovieByName(searchQuery);\n        setMovies(response.results);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getMovieCast();\n  }, [searchQuery]);\n\n  const handleChangeInput = e => {\n    const query = e.currentTarget.value.toLowerCase();\n    setSearchParams(query ? { q: query } : {});\n  };\n\n  if (!movies) return;\n  return (\n    <div>\n      <input onChange={handleChangeInput} value={searchQuery} />\n      <MoviesList movies={movies} />\n    </div>\n  );\n}\n\nexport default Movies;\n","import axios from 'axios';\nimport * as auth from './authentication';\n\n// Base URL for The Movie Database (TMDb) API.\nconst TMDB_BASE_URL = 'https://api.themoviedb.org/3';\n\n// Authorization header for API requests (with API Read Access Token).\nconst AUTHORIZATION_HEADER = `Bearer ${auth.ACCESS_TOKEN}`;\n\n// Default parameters for requests.\nconst defaultParams = {\n  language: 'uk', //'en-US',\n};\n\n/**\n * Creates an Axios instance with configured parameters.\n * @returns {AxiosInstance} - Axios instance.\n */\nconst createAxiosInstance = () => {\n  const instance = axios.create({\n    baseURL: TMDB_BASE_URL,\n    headers: {\n      Authorization: AUTHORIZATION_HEADER,\n      accept: 'application/json',\n    },\n  });\n  return instance;\n};\n\n/**\n * Handles request errors and throws an exception.\n * @param {Error} error - Axios error.\n * @throws {Error} - Error with detailed message.\n */\nconst handleError = error => {\n  console.error('An error occurred while fetching data: ', error);\n  throw error;\n};\n\n/**\n * Sends an HTTP request to The Movie Database (TMDb) API.\n * @param {string} url - API resource path.\n * @param {Object} params - Request parameters.\n * @returns {Promise} - Promise resolved with data from the API response.\n * @throws {Error} - Error when making an API request.\n */\nconst sendRequest = async (url, params) => {\n  const axiosInstance = createAxiosInstance();\n  try {\n    const response = await axiosInstance.get(url, { params });\n    return response.data;\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n/**\n * Retrieves a list of popular movies for the current day.\n * @param {number} currentPage - The current page (default is 1).\n * @returns {Promise} - A Promise that resolves with data about popular movies.\n */\nexport const getTrending = async (currentPage = 1) => {\n  const page =\n    currentPage > 1 && currentPage < 501 ? { page: currentPage } : {};\n  const params = { ...defaultParams, ...page };\n  return sendRequest('/trending/movie/week', params);\n};\n\n/**\n * Searches for movies by name.\n *\n * @param {string} searchQuery - The name of the movie to search for.\n * @param {number} currentPage - The current page (default is 1).\n * @param {boolean} includeAdult - Whether to include adult content (default is false).\n * @returns {Promise} - A Promise that resolves with search results for the specified movie name.\n */\nexport const getSearchMovieByName = async (\n  searchQuery,\n  currentPage = 1,\n  include_adult = false\n) => {\n  const page =\n    currentPage > 1 && currentPage < 501 ? { page: currentPage } : {};\n  const query = searchQuery ? { query: searchQuery } : {};\n  const params = {\n    ...defaultParams,\n    ...page,\n    ...{ include_adult },\n    ...query,\n  };\n  return sendRequest('/search/movie', params);\n};\n\n/**\n * Fetches movie details by ID.\n *\n * @param {number} id - The ID of the movie to retrieve details for.\n * @returns {Promise} - A Promise that resolves with details of the movie.\n */\nexport const getDetailsById = async id => {\n  return sendRequest(`/movie/${id}`, defaultParams);\n};\n\n/**\n * Fetches movie credits by ID.\n *\n * @param {number} id - The ID of the movie to retrieve credits for.\n * @returns {Promise} - A Promise that resolves with credits information for the movie.\n */\nexport const getMovieCreditsById = async id => {\n  return sendRequest(`/movie/${id}/credits`, defaultParams);\n};\n\n/**\n * Fetches movie reviews by ID.\n *\n * @param {number} id - The ID of the movie to retrieve reviews for.\n * @returns {Promise} - A Promise that resolves with reviews for the movie.\n */\nexport const getMovieReviewsById = async id => {\n  return sendRequest(`/movie/${id}/reviews`, defaultParams);\n};\n","const ACCESS_TOKEN =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkNzAyOWU5YWZkNTU1ZGY1OThjOGQ5YWFjZjE1MzE5NCIsInN1YiI6IjY1MDdlOTZkMzk0YTg3MDEzOTE2M2ZhMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.NoihScHXYkfZWcV8hIaKYGQj8NhV_3GT6Zlttn5TCAE';\n\nconst API_KEY = 'd7029e9afd555df598c8d9aacf153194';\n\nexport { ACCESS_TOKEN, API_KEY };\n"],"names":["ListContainer","styled","ItemLink","Link","Image","item","location","useLocation","addPath","pathname","to","id","state","from","src","poster_path","alt","title","movies","map","movie","useSearchParams","searchParams","setSearchParams","searchQuery","get","useState","setMovies","useEffect","API","response","results","console","log","getMovieCast","onChange","e","query","currentTarget","value","toLowerCase","q","MoviesList","AUTHORIZATION_HEADER","defaultParams","language","handleError","error","sendRequest","url","params","axiosInstance","axios","baseURL","headers","Authorization","accept","data","getTrending","currentPage","page","getSearchMovieByName","include_adult","getDetailsById","getMovieCreditsById","getMovieReviewsById"],"sourceRoot":""}