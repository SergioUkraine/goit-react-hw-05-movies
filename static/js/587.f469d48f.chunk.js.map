{"version":3,"file":"static/js/587.f469d48f.chunk.js","mappings":"qNAEaA,EAAgBC,EAAAA,EAAAA,GAAH,kM,iBCEbC,EAAOD,EAAAA,EAAAA,GAAH,kQAYJE,GAAWF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,iEAMRI,EAAQJ,EAAAA,EAAAA,IAAH,uGAOLK,EAAQL,EAAAA,EAAAA,IAAH,oRAaLM,EAAQN,EAAAA,EAAAA,EAAH,2KAULO,EAAYP,EAAAA,EAAAA,KAAH,kEAKTQ,EAAOR,EAAAA,EAAAA,EAAH,8FAOJS,GAAWT,EAAAA,EAAAA,GAAOU,EAAAA,IAAPV,CAAH,8C,0BCVrB,I,EAAA,EArCA,YAAqC,IAAhBW,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACnBC,GAAWC,EAAAA,EAAAA,MACXC,EAAgC,YAAtBF,EAASG,SAAyB,GAAK,UACvD,OACE,SAACf,EAAD,WACE,UAACC,EAAD,CAAUe,GAAE,UAAKF,GAAL,OAAeJ,EAAKO,IAAMC,MAAO,CAAEC,KAAMP,GAArD,UACGF,EAAKU,aACJ,SAACjB,EAAD,CAAOkB,IATI,mCASgBX,EAAKU,YAAaE,IAAKZ,EAAKa,SAEvD,SAACpB,EAAD,CAAOkB,IAAKG,EAAeF,IAAK,oBAGlC,UAAClB,EAAD,YACE,UAACC,EAAD,YACE,UAACC,EAAD,YACE,SAACE,EAAD,IACCE,EAAKe,aAAaC,QAAQ,MAEN,MAAtBd,EAASG,UAAmB,gCAAQJ,KAAgB,SAEvD,SAACJ,EAAD,UAAOG,EAAKa,eAKrB,E,SCxCYI,EAAY5B,EAAAA,EAAAA,IAAH,gJCatB,MAZA,WACE,OAAuB6B,EAAAA,EAAAA,MAAhBC,GAAP,eACMC,EAAcD,EAAaE,IAAI,KAAOF,EAAaE,IAAI,KAAO,GAEpE,MAAiB,OADIlB,EAAAA,EAAAA,MAAbE,SACqB,KACtBe,GACL,SAACH,EAAD,qHAEA,SAACA,EAAD,2FAEH,ECmBD,MAzBA,YAAiC,IAAXK,EAAU,EAAVA,OACpB,OAAOA,EAAOC,QACZ,SAACnC,EAAD,UACGkC,EAAOE,KAAI,SAACC,EAAOC,GAClB,OAAOD,EAAMlB,IACX,SAAC,EAAD,CAA0BP,KAAMyB,EAAOxB,MAAOyB,EAAQ,GAAtCD,EAAMlB,IACpB,IACL,OAGH,SAAC,EAAD,GAEH,C,uMCZKoB,EAAoB,iBCNxB,uNDSIC,EAAgB,CACpBC,SAAU,MAuBNC,EAAc,SAAAC,GAElB,MADAC,QAAQD,MAAM,0CAA2CA,GACnDA,CACP,EASKE,EAAW,mCAAG,WAAOC,EAAKC,GAAZ,gFACZC,EA5BWC,EAAAA,EAAAA,OAAa,CAC5BC,QAhBkB,+BAiBlBC,QAAS,CACPC,cAAeb,EACfc,OAAQ,sBAuBM,kBAGOL,EAAcf,IAAIa,EAAK,CAAEC,OAAAA,IAHhC,cAGVO,EAHU,yBAITA,EAASC,MAJA,yDAMTb,EAAY,EAAD,KANF,yDAAH,wDAeJc,EAAW,mCAAG,2GAAOC,EAAP,+BAAqB,EACxCC,EACJD,EAAc,GAAKA,EAAc,IAAM,CAAEC,KAAMD,GAAgB,CAAC,EAC5DV,GAHmB,kBAGLP,GAAkBkB,GAHb,kBAIlBb,EAAY,uBAAwBE,IAJlB,2CAAH,qDAeXY,EAAoB,mCAAG,WAClC3B,GADkC,kGAElCyB,EAFkC,+BAEpB,EACdG,EAHkC,gCAK5BF,EACJD,EAAc,GAAKA,EAAc,IAAM,CAAEC,KAAMD,GAAgB,CAAC,EAC5DI,EAAQ7B,EAAc,CAAE6B,MAAO7B,GAAgB,CAAC,EAChDe,GAR4B,kCAS7BP,GACAkB,GACA,CAAEE,cAAAA,IACFC,GAZ6B,kBAc3BhB,EAAY,gBAAiBE,IAdF,2CAAH,sDAuBpBe,EAAc,mCAAG,WAAM3C,GAAN,0FACrB0B,EAAY,UAAD,OAAW1B,GAAMqB,IADP,2CAAH,sDAUduB,EAAmB,mCAAG,WAAM5C,GAAN,0FAC1B0B,EAAY,UAAD,OAAW1B,EAAX,YAAyBqB,IADV,2CAAH,sDAUnBwB,EAAmB,mCAAG,WAAM7C,GAAN,0FAC1B0B,EAAY,UAAD,OAAW1B,EAAX,YAAyBqB,IADV,2CAAH,qD","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MovieItem/MovieItem.styled.jsx","components/MoviesList/MovieItem/MovieItem.jsx","components/MoviesList/MovieEmpty/MovieEmpty.styled.jsx","components/MoviesList/MovieEmpty/MovieEmpty.jsx","components/MoviesList/MoviesList.jsx","services/api.js","services/authentication.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListContainer = styled.ul`\n  margin: 0;\n  padding: 30px 0;\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n  grid-gap: 24px;\n`;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nimport { AiFillStar } from 'react-icons/ai';\n\nexport const Item = styled.li`\n  position: relative;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: 10px;\n  background-color: grey;\n  &:hover {\n    transform: scale(1.03);\n    cursor: pointer;\n    border: white solid 2px;\n  }\n`;\n\nexport const ItemLink = styled(Link)`\n  &:hover > div {\n    opacity: 1;\n  }\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 10px;\n`;\n\nexport const Thumb = styled.div`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  padding: 10px 20px;\n  margin: 0;\n  color: white;\n  background-color: rgba(0, 0, 0, 0.7);\n  opacity: 0;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: 10px 10px 0 0;\n`;\n\nexport const Place = styled.p`\n  display: flex;\n  justify-content: space-between;\n  margin: 0;\n  margin-bottom: 10px;\n  padding: 0;\n  font-size: 24px;\n  font-weight: 700;\n`;\n\nexport const RateBlock = styled.span`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Name = styled.p`\n  margin: 0;\n  padding: 0;\n  font-size: 20px;\n  font-weight: 700;\n`;\n\nexport const RateIcon = styled(AiFillStar)`\n  margin-right: 4px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Item,\n  ItemLink,\n  Image,\n  Thumb,\n  Place,\n  Name,\n  RateBlock,\n  RateIcon,\n} from './MovieItem.styled';\nimport { useLocation } from 'react-router-dom';\nimport noPosterImage from '../../../images/poster.jpg';\n\nconst IMG_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\n\nfunction MovieItem({ item, place }) {\n  const location = useLocation();\n  const addPath = location.pathname === '/movies' ? '' : 'movies/';\n  return (\n    <Item>\n      <ItemLink to={`${addPath}${item.id}`} state={{ from: location }}>\n        {item.poster_path ? (\n          <Image src={IMG_BASE_URL + item.poster_path} alt={item.title} />\n        ) : (\n          <Image src={noPosterImage} alt={'image no found'} />\n        )}\n\n        <Thumb>\n          <Place>\n            <RateBlock>\n              <RateIcon />\n              {item.vote_average.toFixed(1)}\n            </RateBlock>\n            {location.pathname === '/' ? <span>#{place}</span> : null}\n          </Place>\n          <Name>{item.title}</Name>\n        </Thumb>\n      </ItemLink>\n    </Item>\n  );\n}\n\nMovieItem.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    poster_path: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n  }).isRequired,\n  place: PropTypes.number.isRequired,\n};\n\nexport default MovieItem;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  font-size: 36px;\n  color: white;\n  transform: translate(-50%, 50%);\n`;\n","import { Container } from './MovieEmpty.styled';\nimport { useSearchParams, useLocation } from 'react-router-dom';\n\nfunction MovieEmpty() {\n  const [searchParams] = useSearchParams();\n  const searchQuery = searchParams.get('q') ? searchParams.get('q') : '';\n  const { pathname } = useLocation();\n  if (pathname === '/') return null;\n  return searchQuery ? (\n    <Container>Нічого не знайдено :(</Container>\n  ) : (\n    <Container>Чекаю на запит :)</Container>\n  );\n}\n\nexport default MovieEmpty;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ListContainer } from './MoviesList.styled';\n\nimport MovieItem from './MovieItem';\nimport MovieEmpty from './MovieEmpty';\n\nfunction MoviesList({ movies }) {\n  return movies.length ? (\n    <ListContainer>\n      {movies.map((movie, index) => {\n        return movie.id ? (\n          <MovieItem key={movie.id} item={movie} place={index + 1} />\n        ) : null;\n      })}\n    </ListContainer>\n  ) : (\n    <MovieEmpty />\n  );\n}\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import axios from 'axios';\nimport * as auth from './authentication';\n\n// Base URL for The Movie Database (TMDb) API.\nconst TMDB_BASE_URL = 'https://api.themoviedb.org/3';\n\n// Authorization header for API requests (with API Read Access Token).\nconst AUTHORIZATION_HEADER = `Bearer ${auth.ACCESS_TOKEN}`;\n\n// Default parameters for requests.\nconst defaultParams = {\n  language: 'uk', //'en-US',\n};\n\n/**\n * Creates an Axios instance with configured parameters.\n * @returns {AxiosInstance} - Axios instance.\n */\nconst createAxiosInstance = () => {\n  const instance = axios.create({\n    baseURL: TMDB_BASE_URL,\n    headers: {\n      Authorization: AUTHORIZATION_HEADER,\n      accept: 'application/json',\n    },\n  });\n  return instance;\n};\n\n/**\n * Handles request errors and throws an exception.\n * @param {Error} error - Axios error.\n * @throws {Error} - Error with detailed message.\n */\nconst handleError = error => {\n  console.error('An error occurred while fetching data: ', error);\n  throw error;\n};\n\n/**\n * Sends an HTTP request to The Movie Database (TMDb) API.\n * @param {string} url - API resource path.\n * @param {Object} params - Request parameters.\n * @returns {Promise} - Promise resolved with data from the API response.\n * @throws {Error} - Error when making an API request.\n */\nconst sendRequest = async (url, params) => {\n  const axiosInstance = createAxiosInstance();\n  try {\n    const response = await axiosInstance.get(url, { params });\n    return response.data;\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n/**\n * Retrieves a list of popular movies for the current day.\n * @param {number} currentPage - The current page (default is 1).\n * @returns {Promise} - A Promise that resolves with data about popular movies.\n */\nexport const getTrending = async (currentPage = 1) => {\n  const page =\n    currentPage > 1 && currentPage < 501 ? { page: currentPage } : {};\n  const params = { ...defaultParams, ...page };\n  return sendRequest('/trending/movie/week', params);\n};\n\n/**\n * Searches for movies by name.\n *\n * @param {string} searchQuery - The name of the movie to search for.\n * @param {number} currentPage - The current page (default is 1).\n * @param {boolean} includeAdult - Whether to include adult content (default is false).\n * @returns {Promise} - A Promise that resolves with search results for the specified movie name.\n */\nexport const getSearchMovieByName = async (\n  searchQuery,\n  currentPage = 1,\n  include_adult = false\n) => {\n  const page =\n    currentPage > 1 && currentPage < 501 ? { page: currentPage } : {};\n  const query = searchQuery ? { query: searchQuery } : {};\n  const params = {\n    ...defaultParams,\n    ...page,\n    ...{ include_adult },\n    ...query,\n  };\n  return sendRequest('/search/movie', params);\n};\n\n/**\n * Fetches movie details by ID.\n *\n * @param {number} id - The ID of the movie to retrieve details for.\n * @returns {Promise} - A Promise that resolves with details of the movie.\n */\nexport const getDetailsById = async id => {\n  return sendRequest(`/movie/${id}`, defaultParams);\n};\n\n/**\n * Fetches movie credits by ID.\n *\n * @param {number} id - The ID of the movie to retrieve credits for.\n * @returns {Promise} - A Promise that resolves with credits information for the movie.\n */\nexport const getMovieCreditsById = async id => {\n  return sendRequest(`/movie/${id}/credits`, defaultParams);\n};\n\n/**\n * Fetches movie reviews by ID.\n *\n * @param {number} id - The ID of the movie to retrieve reviews for.\n * @returns {Promise} - A Promise that resolves with reviews for the movie.\n */\nexport const getMovieReviewsById = async id => {\n  return sendRequest(`/movie/${id}/reviews`, defaultParams);\n};\n","const ACCESS_TOKEN =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkNzAyOWU5YWZkNTU1ZGY1OThjOGQ5YWFjZjE1MzE5NCIsInN1YiI6IjY1MDdlOTZkMzk0YTg3MDEzOTE2M2ZhMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.NoihScHXYkfZWcV8hIaKYGQj8NhV_3GT6Zlttn5TCAE';\n\nconst API_KEY = 'd7029e9afd555df598c8d9aacf153194';\n\nexport { ACCESS_TOKEN, API_KEY };\n"],"names":["ListContainer","styled","Item","ItemLink","Link","Image","Thumb","Place","RateBlock","Name","RateIcon","AiFillStar","item","place","location","useLocation","addPath","pathname","to","id","state","from","poster_path","src","alt","title","noPosterImage","vote_average","toFixed","Container","useSearchParams","searchParams","searchQuery","get","movies","length","map","movie","index","AUTHORIZATION_HEADER","defaultParams","language","handleError","error","console","sendRequest","url","params","axiosInstance","axios","baseURL","headers","Authorization","accept","response","data","getTrending","currentPage","page","getSearchMovieByName","include_adult","query","getDetailsById","getMovieCreditsById","getMovieReviewsById"],"sourceRoot":""}