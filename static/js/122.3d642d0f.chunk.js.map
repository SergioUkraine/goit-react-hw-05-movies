{"version":3,"file":"static/js/122.3d642d0f.chunk.js","mappings":"8PAqCA,MAjCA,WACE,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAaA,IAZAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,6GAE2BC,EAAAA,GAAwBN,GAFnD,OAEUO,EAFV,OAGIH,EAAWG,EAASC,SAHxB,gDAKIC,QAAQC,IAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACX,IAECG,EACL,OACE,iCACE,kEACCA,EAAQS,QACP,yBACGT,EAAQU,KAAI,SAACC,EAAQC,GACpB,OAAIA,EAAQ,EAAU,MACf,uBAAgBD,GAARC,EAChB,OAGH,8KAIP,C,uMC5BKC,EAAoB,iBCNxB,uNDSIC,EAAgB,CACpBC,SAAU,MAuBNC,EAAc,SAAAC,GAElB,MADAX,QAAQW,MAAM,0CAA2CA,GACnDA,CACP,EASKC,EAAW,mCAAG,WAAOC,EAAKC,GAAZ,gFACZC,EA5BWC,EAAAA,EAAAA,OAAa,CAC5BC,QAhBkB,+BAiBlBC,QAAS,CACPC,cAAeZ,EACfa,OAAQ,sBAuBM,kBAGOL,EAAcM,IAAIR,EAAK,CAAEC,OAAAA,IAHhC,cAGVhB,EAHU,yBAITA,EAASwB,MAJA,yDAMTZ,EAAY,EAAD,KANF,yDAAH,wDAeJa,EAAW,mCAAG,2GAAOC,EAAP,+BAAqB,EACxCC,EACJD,EAAc,GAAKA,EAAc,IAAM,CAAEC,KAAMD,GAAgB,CAAC,EAC5DV,GAHmB,kBAGLN,GAAkBiB,GAHb,kBAIlBb,EAAY,uBAAwBE,IAJlB,2CAAH,qDAeXY,EAAoB,mCAAG,WAClCC,GADkC,kGAElCH,EAFkC,+BAEpB,EACdI,EAHkC,gCAK5BH,EACJD,EAAc,GAAKA,EAAc,IAAM,CAAEC,KAAMD,GAAgB,CAAC,EAC5DK,EAAQF,EAAc,CAAEE,MAAOF,GAAgB,CAAC,EAChDb,GAR4B,kCAS7BN,GACAiB,GACA,CAAEG,cAAAA,IACFC,GAZ6B,kBAc3BjB,EAAY,gBAAiBE,IAdF,2CAAH,sDAuBpBgB,EAAc,mCAAG,WAAMC,GAAN,0FACrBnB,EAAY,UAAD,OAAWmB,GAAMvB,IADP,2CAAH,sDAUdwB,EAAmB,mCAAG,WAAMD,GAAN,0FAC1BnB,EAAY,UAAD,OAAWmB,EAAX,YAAyBvB,IADV,2CAAH,sDAUnByB,EAAmB,mCAAG,WAAMF,GAAN,0FAC1BnB,EAAY,UAAD,OAAWmB,EAAX,YAAyBvB,IADV,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","services/api.js","services/authentication.js"],"sourcesContent":["import * as API from '../../services/api';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n\nfunction Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  useEffect(() => {\n    async function getReviews() {\n      try {\n        const response = await API.getMovieReviewsById(movieId);\n        setReviews(response.results);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getReviews();\n  }, [movieId]);\n\n  if (!reviews) return;\n  return (\n    <>\n      <h2>Огляди:</h2>\n      {reviews.length ? (\n        <div>\n          {reviews.map((review, index) => {\n            if (index > 9) return null;\n            return <p key={index}>{review}</p>;\n          })}\n        </div>\n      ) : (\n        <p>Нажаль оглядів не знайдено :(</p>\n      )}\n    </>\n  );\n}\n\nexport default Reviews;\n","import axios from 'axios';\nimport * as auth from './authentication';\n\n// Base URL for The Movie Database (TMDb) API.\nconst TMDB_BASE_URL = 'https://api.themoviedb.org/3';\n\n// Authorization header for API requests (with API Read Access Token).\nconst AUTHORIZATION_HEADER = `Bearer ${auth.ACCESS_TOKEN}`;\n\n// Default parameters for requests.\nconst defaultParams = {\n  language: 'uk', //'en-US',\n};\n\n/**\n * Creates an Axios instance with configured parameters.\n * @returns {AxiosInstance} - Axios instance.\n */\nconst createAxiosInstance = () => {\n  const instance = axios.create({\n    baseURL: TMDB_BASE_URL,\n    headers: {\n      Authorization: AUTHORIZATION_HEADER,\n      accept: 'application/json',\n    },\n  });\n  return instance;\n};\n\n/**\n * Handles request errors and throws an exception.\n * @param {Error} error - Axios error.\n * @throws {Error} - Error with detailed message.\n */\nconst handleError = error => {\n  console.error('An error occurred while fetching data: ', error);\n  throw error;\n};\n\n/**\n * Sends an HTTP request to The Movie Database (TMDb) API.\n * @param {string} url - API resource path.\n * @param {Object} params - Request parameters.\n * @returns {Promise} - Promise resolved with data from the API response.\n * @throws {Error} - Error when making an API request.\n */\nconst sendRequest = async (url, params) => {\n  const axiosInstance = createAxiosInstance();\n  try {\n    const response = await axiosInstance.get(url, { params });\n    return response.data;\n  } catch (error) {\n    return handleError(error);\n  }\n};\n\n/**\n * Retrieves a list of popular movies for the current day.\n * @param {number} currentPage - The current page (default is 1).\n * @returns {Promise} - A Promise that resolves with data about popular movies.\n */\nexport const getTrending = async (currentPage = 1) => {\n  const page =\n    currentPage > 1 && currentPage < 501 ? { page: currentPage } : {};\n  const params = { ...defaultParams, ...page };\n  return sendRequest('/trending/movie/week', params);\n};\n\n/**\n * Searches for movies by name.\n *\n * @param {string} searchQuery - The name of the movie to search for.\n * @param {number} currentPage - The current page (default is 1).\n * @param {boolean} includeAdult - Whether to include adult content (default is false).\n * @returns {Promise} - A Promise that resolves with search results for the specified movie name.\n */\nexport const getSearchMovieByName = async (\n  searchQuery,\n  currentPage = 1,\n  include_adult = false\n) => {\n  const page =\n    currentPage > 1 && currentPage < 501 ? { page: currentPage } : {};\n  const query = searchQuery ? { query: searchQuery } : {};\n  const params = {\n    ...defaultParams,\n    ...page,\n    ...{ include_adult },\n    ...query,\n  };\n  return sendRequest('/search/movie', params);\n};\n\n/**\n * Fetches movie details by ID.\n *\n * @param {number} id - The ID of the movie to retrieve details for.\n * @returns {Promise} - A Promise that resolves with details of the movie.\n */\nexport const getDetailsById = async id => {\n  return sendRequest(`/movie/${id}`, defaultParams);\n};\n\n/**\n * Fetches movie credits by ID.\n *\n * @param {number} id - The ID of the movie to retrieve credits for.\n * @returns {Promise} - A Promise that resolves with credits information for the movie.\n */\nexport const getMovieCreditsById = async id => {\n  return sendRequest(`/movie/${id}/credits`, defaultParams);\n};\n\n/**\n * Fetches movie reviews by ID.\n *\n * @param {number} id - The ID of the movie to retrieve reviews for.\n * @returns {Promise} - A Promise that resolves with reviews for the movie.\n */\nexport const getMovieReviewsById = async id => {\n  return sendRequest(`/movie/${id}/reviews`, defaultParams);\n};\n","const ACCESS_TOKEN =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkNzAyOWU5YWZkNTU1ZGY1OThjOGQ5YWFjZjE1MzE5NCIsInN1YiI6IjY1MDdlOTZkMzk0YTg3MDEzOTE2M2ZhMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.NoihScHXYkfZWcV8hIaKYGQj8NhV_3GT6Zlttn5TCAE';\n\nconst API_KEY = 'd7029e9afd555df598c8d9aacf153194';\n\nexport { ACCESS_TOKEN, API_KEY };\n"],"names":["movieId","useParams","useState","reviews","setReviews","useEffect","API","response","results","console","log","getReviews","length","map","review","index","AUTHORIZATION_HEADER","defaultParams","language","handleError","error","sendRequest","url","params","axiosInstance","axios","baseURL","headers","Authorization","accept","get","data","getTrending","currentPage","page","getSearchMovieByName","searchQuery","include_adult","query","getDetailsById","id","getMovieCreditsById","getMovieReviewsById"],"sourceRoot":""}